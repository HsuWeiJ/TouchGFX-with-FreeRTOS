// 4.19.1 0x0dc76dff
// Generated by imageconverter. Please, do not edit!

#include <BitmapDatabase.hpp>
#include <touchgfx/Bitmap.hpp>

extern const unsigned char image_background[]; // BITMAP_BACKGROUND_ID = 0, Size: 320x240 pixels
extern const unsigned char image_blue_progressindicators_bg_medium_circle_indicator_bg_full[]; // BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_CIRCLE_INDICATOR_BG_FULL_ID = 1, Size: 104x104 pixels
extern const unsigned char image_blue_progressindicators_bg_medium_progress_indicator_bg_round_0_degrees[]; // BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_PROGRESS_INDICATOR_BG_ROUND_0_DEGREES_ID = 2, Size: 184x20 pixels
extern const unsigned char image_blue_progressindicators_fill_medium_circle_indicator_fill_full[]; // BITMAP_BLUE_PROGRESSINDICATORS_FILL_MEDIUM_CIRCLE_INDICATOR_FILL_FULL_ID = 3, Size: 104x104 pixels
extern const unsigned char image_check_mark[]; // BITMAP_CHECK_MARK_ID = 4, Size: 38x38 pixels
extern const unsigned char image_down[]; // BITMAP_DOWN_ID = 5, Size: 45x35 pixels
extern const unsigned char image_home[]; // BITMAP_HOME_ID = 6, Size: 40x40 pixels
extern const unsigned char image_humidity[]; // BITMAP_HUMIDITY_ID = 7, Size: 40x40 pixels
extern const unsigned char image_left_slide_menu_background[]; // BITMAP_LEFT_SLIDE_MENU_BACKGROUND_ID = 8, Size: 57x240 pixels
extern const unsigned char image_left_slide_menu_button[]; // BITMAP_LEFT_SLIDE_MENU_BUTTON_ID = 9, Size: 24x54 pixels
extern const unsigned char image_log_out[]; // BITMAP_LOG_OUT_ID = 10, Size: 40x40 pixels
extern const unsigned char image_refreshing[]; // BITMAP_REFRESHING_ID = 11, Size: 38x38 pixels
extern const unsigned char image_temp[]; // BITMAP_TEMP_ID = 12, Size: 40x40 pixels
extern const unsigned char image_thunder[]; // BITMAP_THUNDER_ID = 13, Size: 40x40 pixels
extern const unsigned char image_upload[]; // BITMAP_UPLOAD_ID = 14, Size: 45x35 pixels

const touchgfx::Bitmap::BitmapData bitmap_database[] = {
    { image_background, 0, 320, 240, 0, 0, 320, ((uint8_t)touchgfx::Bitmap::RGB565) >> 3, 240, ((uint8_t)touchgfx::Bitmap::RGB565) & 0x7 },
    { image_blue_progressindicators_bg_medium_circle_indicator_bg_full, 0, 104, 104, 16, 15, 72, ((uint8_t)touchgfx::Bitmap::ARGB8888) >> 3, 74, ((uint8_t)touchgfx::Bitmap::ARGB8888) & 0x7 },
    { image_blue_progressindicators_bg_medium_progress_indicator_bg_round_0_degrees, 0, 184, 20, 10, 0, 164, ((uint8_t)touchgfx::Bitmap::ARGB8888) >> 3, 20, ((uint8_t)touchgfx::Bitmap::ARGB8888) & 0x7 },
    { image_blue_progressindicators_fill_medium_circle_indicator_fill_full, 0, 104, 104, 17, 17, 70, ((uint8_t)touchgfx::Bitmap::ARGB8888) >> 3, 70, ((uint8_t)touchgfx::Bitmap::ARGB8888) & 0x7 },
    { image_check_mark, 0, 38, 38, 35, 12, 2, ((uint8_t)touchgfx::Bitmap::ARGB8888) >> 3, 14, ((uint8_t)touchgfx::Bitmap::ARGB8888) & 0x7 },
    { image_down, 0, 45, 35, 0, 0, 45, ((uint8_t)touchgfx::Bitmap::RGB565) >> 3, 35, ((uint8_t)touchgfx::Bitmap::RGB565) & 0x7 },
    { image_home, 0, 40, 40, 6, 12, 28, ((uint8_t)touchgfx::Bitmap::ARGB8888) >> 3, 15, ((uint8_t)touchgfx::Bitmap::ARGB8888) & 0x7 },
    { image_humidity, 0, 40, 40, 9, 9, 3, ((uint8_t)touchgfx::Bitmap::ARGB8888) >> 3, 22, ((uint8_t)touchgfx::Bitmap::ARGB8888) & 0x7 },
    { image_left_slide_menu_background, 0, 57, 240, 0, 0, 54, ((uint8_t)touchgfx::Bitmap::ARGB8888) >> 3, 240, ((uint8_t)touchgfx::Bitmap::ARGB8888) & 0x7 },
    { image_left_slide_menu_button, 0, 24, 54, 0, 8, 20, ((uint8_t)touchgfx::Bitmap::ARGB8888) >> 3, 38, ((uint8_t)touchgfx::Bitmap::ARGB8888) & 0x7 },
    { image_log_out, 0, 40, 40, 33, 7, 4, ((uint8_t)touchgfx::Bitmap::ARGB8888) >> 3, 26, ((uint8_t)touchgfx::Bitmap::ARGB8888) & 0x7 },
    { image_refreshing, 0, 38, 38, 1, 12, 4, ((uint8_t)touchgfx::Bitmap::ARGB8888) >> 3, 14, ((uint8_t)touchgfx::Bitmap::ARGB8888) & 0x7 },
    { image_temp, 0, 40, 40, 20, 8, 6, ((uint8_t)touchgfx::Bitmap::ARGB8888) >> 3, 30, ((uint8_t)touchgfx::Bitmap::ARGB8888) & 0x7 },
    { image_thunder, 0, 40, 40, 10, 14, 19, ((uint8_t)touchgfx::Bitmap::ARGB8888) >> 3, 6, ((uint8_t)touchgfx::Bitmap::ARGB8888) & 0x7 },
    { image_upload, 0, 45, 35, 0, 0, 45, ((uint8_t)touchgfx::Bitmap::RGB565) >> 3, 35, ((uint8_t)touchgfx::Bitmap::RGB565) & 0x7 }
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
} // namespace BitmapDatabase
