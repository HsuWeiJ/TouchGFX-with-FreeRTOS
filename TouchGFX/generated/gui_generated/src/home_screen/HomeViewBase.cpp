/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/home_screen/HomeViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

HomeViewBase::HomeViewBase() :
    flexButtonCallback(this, &HomeViewBase::flexButtonCallbackHandler)
{

    __background.setPosition(0, 0, 320, 240);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    image1.setXY(0, 0);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));

    slideMenuLeft.setup(touchgfx::SlideMenu::EAST,
        touchgfx::Bitmap(BITMAP_LEFT_SLIDE_MENU_BACKGROUND_ID),
        touchgfx::Bitmap(BITMAP_LEFT_SLIDE_MENU_BUTTON_ID),
        touchgfx::Bitmap(BITMAP_LEFT_SLIDE_MENU_BUTTON_ID),
        0, 0, 50, 90);
    slideMenuLeft.setState(touchgfx::SlideMenu::COLLAPSED);
    slideMenuLeft.setVisiblePixelsWhenCollapsed(25);
    slideMenuLeft.setHiddenPixelsWhenExpanded(0);
    slideMenuLeft.setAnimationEasingEquation(touchgfx::EasingEquations::cubicEaseInOut);
    slideMenuLeft.setAnimationDuration(18);
    slideMenuLeft.setExpandedStateTimeout(180);
    slideMenuLeft.setXY(0, 0);

    Button_Tem.setIconBitmaps(Bitmap(BITMAP_HUMIDITY_ID), Bitmap(BITMAP_HUMIDITY_ID));
    Button_Tem.setIconXY(0, 0);
    Button_Tem.setPosition(6, 74, 39, 46);
    Button_Tem.setAction(flexButtonCallback);
    slideMenuLeft.add(Button_Tem);

    Button_Logout.setIconBitmaps(Bitmap(BITMAP_LOG_OUT_ID), Bitmap(BITMAP_LOG_OUT_ID));
    Button_Logout.setIconXY(0, 0);
    Button_Logout.setPosition(7, 183, 38, 41);
    Button_Logout.setAction(flexButtonCallback);
    slideMenuLeft.add(Button_Logout);

    Button_Home.setIconBitmaps(Bitmap(BITMAP_HOME_ID), Bitmap(BITMAP_HOME_ID));
    Button_Home.setIconXY(0, 0);
    Button_Home.setPosition(7, 17, 39, 45);
    Button_Home.setAction(flexButtonCallback);
    slideMenuLeft.add(Button_Home);

    Button_Vol.setIconBitmaps(Bitmap(BITMAP_THUNDER_ID), Bitmap(BITMAP_THUNDER_ID));
    Button_Vol.setIconXY(0, 0);
    Button_Vol.setPosition(5, 132, 41, 38);
    Button_Vol.setAction(flexButtonCallback);
    slideMenuLeft.add(Button_Vol);

    textArea_Year.setXY(72, 56);
    textArea_Year.setColor(touchgfx::Color::getColorFromRGB(250, 248, 248));
    textArea_Year.setLinespacing(0);
    Unicode::snprintf(textArea_YearBuffer, TEXTAREA_YEAR_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_MKWO).getText());
    textArea_Year.setWildcard(textArea_YearBuffer);
    textArea_Year.resizeToCurrentText();
    textArea_Year.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P8XZ));

    textArea_dash_1.setXY(155, 56);
    textArea_dash_1.setColor(touchgfx::Color::getColorFromRGB(250, 248, 248));
    textArea_dash_1.setLinespacing(0);
    textArea_dash_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VMEN));

    textArea_Month.setXY(175, 56);
    textArea_Month.setColor(touchgfx::Color::getColorFromRGB(250, 248, 248));
    textArea_Month.setLinespacing(0);
    Unicode::snprintf(textArea_MonthBuffer, TEXTAREA_MONTH_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_JGUZ).getText());
    textArea_Month.setWildcard(textArea_MonthBuffer);
    textArea_Month.resizeToCurrentText();
    textArea_Month.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6IW8));

    textArea_dash_2.setXY(225, 59);
    textArea_dash_2.setColor(touchgfx::Color::getColorFromRGB(250, 248, 248));
    textArea_dash_2.setLinespacing(0);
    textArea_dash_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2TXZ));

    textArea_Date.setXY(245, 56);
    textArea_Date.setColor(touchgfx::Color::getColorFromRGB(250, 248, 248));
    textArea_Date.setLinespacing(0);
    Unicode::snprintf(textArea_DateBuffer, TEXTAREA_DATE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_9ORP).getText());
    textArea_Date.setWildcard(textArea_DateBuffer);
    textArea_Date.resizeToCurrentText();
    textArea_Date.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CIY4));

    textArea_Hour.setXY(91, 151);
    textArea_Hour.setColor(touchgfx::Color::getColorFromRGB(250, 248, 248));
    textArea_Hour.setLinespacing(0);
    Unicode::snprintf(textArea_HourBuffer, TEXTAREA_HOUR_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_6DNU).getText());
    textArea_Hour.setWildcard(textArea_HourBuffer);
    textArea_Hour.resizeToCurrentText();
    textArea_Hour.setTypedText(touchgfx::TypedText(T___SINGLEUSE_48EU));

    textArea_Minute.setXY(175, 151);
    textArea_Minute.setColor(touchgfx::Color::getColorFromRGB(250, 248, 248));
    textArea_Minute.setLinespacing(0);
    Unicode::snprintf(textArea_MinuteBuffer, TEXTAREA_MINUTE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_MJSN).getText());
    textArea_Minute.setWildcard(textArea_MinuteBuffer);
    textArea_Minute.resizeToCurrentText();
    textArea_Minute.setTypedText(touchgfx::TypedText(T___SINGLEUSE_14SA));

    textArea_Sec.setXY(245, 151);
    textArea_Sec.setColor(touchgfx::Color::getColorFromRGB(250, 248, 248));
    textArea_Sec.setLinespacing(0);
    Unicode::snprintf(textArea_SecBuffer, TEXTAREA_SEC_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_O863).getText());
    textArea_Sec.setWildcard(textArea_SecBuffer);
    textArea_Sec.resizeToCurrentText();
    textArea_Sec.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YJTJ));

    textArea_colon_1.setXY(154, 147);
    textArea_colon_1.setColor(touchgfx::Color::getColorFromRGB(250, 248, 248));
    textArea_colon_1.setLinespacing(0);
    textArea_colon_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X6MM));

    textArea_colon_2.setXY(223, 147);
    textArea_colon_2.setColor(touchgfx::Color::getColorFromRGB(250, 248, 248));
    textArea_colon_2.setLinespacing(0);
    textArea_colon_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XJOY));

    textArea_Cpu.setPosition(175, 2, 136, 29);
    textArea_Cpu.setColor(touchgfx::Color::getColorFromRGB(250, 248, 248));
    textArea_Cpu.setLinespacing(0);
    Unicode::snprintf(textArea_CpuBuffer, TEXTAREA_CPU_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_EBCG).getText());
    textArea_Cpu.setWildcard(textArea_CpuBuffer);
    textArea_Cpu.setTypedText(touchgfx::TypedText(T___SINGLEUSE_FTB7));

    textArea_Week.setXY(157, 105);
    textArea_Week.setColor(touchgfx::Color::getColorFromRGB(250, 248, 248));
    textArea_Week.setLinespacing(0);
    Unicode::snprintf(textArea_WeekBuffer, TEXTAREA_WEEK_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_AWN3).getText());
    textArea_Week.setWildcard(textArea_WeekBuffer);
    textArea_Week.resizeToCurrentText();
    textArea_Week.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2978));

    Button_setting.setIconBitmaps(Bitmap(BITMAP_REFRESHING_ID), Bitmap(BITMAP_REFRESHING_ID));
    Button_setting.setIconXY(0, 0);
    Button_setting.setPosition(148, 200, 37, 40);
    Button_setting.setAction(flexButtonCallback);

    add(__background);
    add(image1);
    add(slideMenuLeft);
    add(textArea_Year);
    add(textArea_dash_1);
    add(textArea_Month);
    add(textArea_dash_2);
    add(textArea_Date);
    add(textArea_Hour);
    add(textArea_Minute);
    add(textArea_Sec);
    add(textArea_colon_1);
    add(textArea_colon_2);
    add(textArea_Cpu);
    add(textArea_Week);
    add(Button_setting);
}

void HomeViewBase::setupScreen()
{

}

void HomeViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &Button_Tem)
    {
        //Interaction_ResetSlideTimer4
        //When Button_Tem clicked reset timer slideMenuLeft
        //reset expanded state timer on slideMenuLeft
        slideMenuLeft.resetExpandedStateTimer();

        //ChangeToTem
        //When Button_Tem clicked change screen to Temperature
        //Go to Temperature with no screen transition
        application().gotoTemperatureScreenNoTransition();
    }
    else if (&src == &Button_Logout)
    {
        //Interaction_ResetSlideTimer3
        //When Button_Logout clicked reset timer slideMenuLeft
        //reset expanded state timer on slideMenuLeft
        slideMenuLeft.resetExpandedStateTimer();

        //ChangeToLog_handle
        //When Button_Logout clicked call virtual function
        //Call HomeToLog_Handle
        HomeToLog_Handle();

        //ChangeToLog
        //When Button_Logout clicked change screen to Log
        //Go to Log with no screen transition
        application().gotoLogScreenNoTransition();
    }
    else if (&src == &Button_Home)
    {
        //Interaction_ResetSlideTimer2
        //When Button_Home clicked reset timer slideMenuLeft
        //reset expanded state timer on slideMenuLeft
        slideMenuLeft.resetExpandedStateTimer();
    }
    else if (&src == &Button_Vol)
    {
        //Interaction_ResetSlideTimer1
        //When Button_Vol clicked reset timer slideMenuLeft
        //reset expanded state timer on slideMenuLeft
        slideMenuLeft.resetExpandedStateTimer();

        //ChangeToVol
        //When Button_Vol clicked change screen to Voltage
        //Go to Voltage with no screen transition
        application().gotoVoltageScreenNoTransition();
    }
    else if (&src == &Button_setting)
    {
        //ChangeToHomeSet
        //When Button_setting clicked change screen to Home_setting
        //Go to Home_setting with no screen transition
        application().gotoHome_settingScreenNoTransition();
    }
}
