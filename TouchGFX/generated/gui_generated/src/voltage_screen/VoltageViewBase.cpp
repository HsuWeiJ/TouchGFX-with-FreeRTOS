/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/voltage_screen/VoltageViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


VoltageViewBase::VoltageViewBase() :
    flexButtonCallback(this, &VoltageViewBase::flexButtonCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 320, 240);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    image1.setXY(0, 0);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));

    slideMenuLeft.setup(touchgfx::SlideMenu::EAST,
        touchgfx::Bitmap(BITMAP_LEFT_SLIDE_MENU_BACKGROUND_ID),
        touchgfx::Bitmap(BITMAP_LEFT_SLIDE_MENU_BUTTON_ID),
        touchgfx::Bitmap(BITMAP_LEFT_SLIDE_MENU_BUTTON_ID),
        0, 0, 50, 90);
    slideMenuLeft.setState(touchgfx::SlideMenu::COLLAPSED);
    slideMenuLeft.setVisiblePixelsWhenCollapsed(25);
    slideMenuLeft.setHiddenPixelsWhenExpanded(0);
    slideMenuLeft.setAnimationEasingEquation(touchgfx::EasingEquations::cubicEaseInOut);
    slideMenuLeft.setAnimationDuration(18);
    slideMenuLeft.setExpandedStateTimeout(180);
    slideMenuLeft.setXY(0, 0);

    Button_Tem.setIconBitmaps(Bitmap(BITMAP_HUMIDITY_ID), Bitmap(BITMAP_HUMIDITY_ID));
    Button_Tem.setIconXY(0, 0);
    Button_Tem.setPosition(6, 74, 39, 46);
    Button_Tem.setAction(flexButtonCallback);
    slideMenuLeft.add(Button_Tem);

    Button_Logout.setIconBitmaps(Bitmap(BITMAP_LOG_OUT_ID), Bitmap(BITMAP_LOG_OUT_ID));
    Button_Logout.setIconXY(0, 0);
    Button_Logout.setPosition(7, 183, 38, 41);
    Button_Logout.setAction(flexButtonCallback);
    slideMenuLeft.add(Button_Logout);

    Button_Home.setIconBitmaps(Bitmap(BITMAP_HOME_ID), Bitmap(BITMAP_HOME_ID));
    Button_Home.setIconXY(0, 0);
    Button_Home.setPosition(7, 17, 39, 45);
    Button_Home.setAction(flexButtonCallback);
    slideMenuLeft.add(Button_Home);

    Button_Vol.setIconBitmaps(Bitmap(BITMAP_THUNDER_ID), Bitmap(BITMAP_THUNDER_ID));
    Button_Vol.setIconXY(0, 0);
    Button_Vol.setPosition(5, 132, 41, 38);
    slideMenuLeft.add(Button_Vol);

    textArea_Vol.setXY(160, 21);
    textArea_Vol.setColor(touchgfx::Color::getColorFromRGB(240, 233, 233));
    textArea_Vol.setLinespacing(0);
    Unicode::snprintf(textArea_VolBuffer, TEXTAREA_VOL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_K0M5).getText());
    textArea_Vol.setWildcard(textArea_VolBuffer);
    textArea_Vol.resizeToCurrentText();
    textArea_Vol.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9XV3));

    Button_up.setIconBitmaps(Bitmap(BITMAP_UPLOAD_ID), Bitmap(BITMAP_UPLOAD_ID));
    Button_up.setIconXY(0, 0);
    Button_up.setPosition(81, 74, 47, 38);
    Button_up.setAction(flexButtonCallback);

    Button_down.setIconBitmaps(Bitmap(BITMAP_DOWN_ID), Bitmap(BITMAP_DOWN_ID));
    Button_down.setIconXY(0, 0);
    Button_down.setPosition(81, 132, 47, 31);
    Button_down.setAction(flexButtonCallback);

    textArea_Duty.setXY(160, 67);
    textArea_Duty.setColor(touchgfx::Color::getColorFromRGB(240, 233, 233));
    textArea_Duty.setLinespacing(0);
    Unicode::snprintf(textArea_DutyBuffer, TEXTAREA_DUTY_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7ROU).getText());
    textArea_Duty.setWildcard(textArea_DutyBuffer);
    textArea_Duty.resizeToCurrentText();
    textArea_Duty.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YMYZ));

    circleProgress_Duty.setXY(181, 120);
    circleProgress_Duty.setProgressIndicatorPosition(0, 0, 104, 104);
    circleProgress_Duty.setRange(0, 100);
    circleProgress_Duty.setCenter(52, 52);
    circleProgress_Duty.setRadius(50);
    circleProgress_Duty.setLineWidth(0);
    circleProgress_Duty.setStartEndAngle(0, 360);
    circleProgress_Duty.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_CIRCLE_INDICATOR_BG_FULL_ID));
    circleProgress_DutyPainter.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_MEDIUM_CIRCLE_INDICATOR_FILL_FULL_ID));
    circleProgress_Duty.setPainter(circleProgress_DutyPainter);
    circleProgress_Duty.setValue(14);

    add(__background);
    add(image1);
    add(slideMenuLeft);
    add(textArea_Vol);
    add(Button_up);
    add(Button_down);
    add(textArea_Duty);
    add(circleProgress_Duty);
}

void VoltageViewBase::setupScreen()
{

}

void VoltageViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &Button_Tem)
    {
        //ChangeToTem
        //When Button_Tem clicked change screen to Temperature
        //Go to Temperature with no screen transition
        application().gotoTemperatureScreenNoTransition();
    }
    else if (&src == &Button_Logout)
    {
        //ChangeToLog
        //When Button_Logout clicked change screen to Log
        //Go to Log with no screen transition
        application().gotoLogScreenNoTransition();

        //ChangeToLog_Handle
        //When Button_Logout clicked call virtual function
        //Call VolToLog_Handle
        VolToLog_Handle();
    }
    else if (&src == &Button_Home)
    {
        //ChangeToHome
        //When Button_Home clicked change screen to Home
        //Go to Home with no screen transition
        application().gotoHomeScreenNoTransition();
    }
    else if (&src == &Button_up)
    {
        //ButtonUpClicked
        //When Button_up clicked call virtual function
        //Call ButtonUpClicked
        ButtonUpClicked();
    }
    else if (&src == &Button_down)
    {
        //ButtonDownClicked
        //When Button_down clicked call virtual function
        //Call ButtonDownClicked
        ButtonDownClicked();
    }
}
